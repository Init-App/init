/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          logo?: parameters["rowFilter.teams.logo"];
          created_at?: parameters["rowFilter.teams.created_at"];
          updated_at?: parameters["rowFilter.teams.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          logo?: parameters["rowFilter.teams.logo"];
          created_at?: parameters["rowFilter.teams.created_at"];
          updated_at?: parameters["rowFilter.teams.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.teams.id"];
          name?: parameters["rowFilter.teams.name"];
          logo?: parameters["rowFilter.teams.logo"];
          created_at?: parameters["rowFilter.teams.created_at"];
          updated_at?: parameters["rowFilter.teams.updated_at"];
        };
        body: {
          /** teams */
          teams?: definitions["teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/environments": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.environments.id"];
          name?: parameters["rowFilter.environments.name"];
          url?: parameters["rowFilter.environments.url"];
          is_enabled?: parameters["rowFilter.environments.is_enabled"];
          team_id?: parameters["rowFilter.environments.team_id"];
          created_at?: parameters["rowFilter.environments.created_at"];
          updated_at?: parameters["rowFilter.environments.updated_at"];
          api_key?: parameters["rowFilter.environments.api_key"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["environments"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** environments */
          environments?: definitions["environments"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.environments.id"];
          name?: parameters["rowFilter.environments.name"];
          url?: parameters["rowFilter.environments.url"];
          is_enabled?: parameters["rowFilter.environments.is_enabled"];
          team_id?: parameters["rowFilter.environments.team_id"];
          created_at?: parameters["rowFilter.environments.created_at"];
          updated_at?: parameters["rowFilter.environments.updated_at"];
          api_key?: parameters["rowFilter.environments.api_key"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.environments.id"];
          name?: parameters["rowFilter.environments.name"];
          url?: parameters["rowFilter.environments.url"];
          is_enabled?: parameters["rowFilter.environments.is_enabled"];
          team_id?: parameters["rowFilter.environments.team_id"];
          created_at?: parameters["rowFilter.environments.created_at"];
          updated_at?: parameters["rowFilter.environments.updated_at"];
          api_key?: parameters["rowFilter.environments.api_key"];
        };
        body: {
          /** environments */
          environments?: definitions["environments"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users_teams": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users_teams.id"];
          user_id?: parameters["rowFilter.users_teams.user_id"];
          team_id?: parameters["rowFilter.users_teams.team_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users_teams"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users_teams */
          users_teams?: definitions["users_teams"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users_teams.id"];
          user_id?: parameters["rowFilter.users_teams.user_id"];
          team_id?: parameters["rowFilter.users_teams.team_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users_teams.id"];
          user_id?: parameters["rowFilter.users_teams.user_id"];
          team_id?: parameters["rowFilter.users_teams.team_id"];
        };
        body: {
          /** users_teams */
          users_teams?: definitions["users_teams"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/settings": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          name?: parameters["rowFilter.settings.name"];
          value?: parameters["rowFilter.settings.value"];
          is_enabled?: parameters["rowFilter.settings.is_enabled"];
          environment_id?: parameters["rowFilter.settings.environment_id"];
          created_at?: parameters["rowFilter.settings.created_at"];
          updated_at?: parameters["rowFilter.settings.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["settings"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** settings */
          settings?: definitions["settings"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          name?: parameters["rowFilter.settings.name"];
          value?: parameters["rowFilter.settings.value"];
          is_enabled?: parameters["rowFilter.settings.is_enabled"];
          environment_id?: parameters["rowFilter.settings.environment_id"];
          created_at?: parameters["rowFilter.settings.created_at"];
          updated_at?: parameters["rowFilter.settings.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          name?: parameters["rowFilter.settings.name"];
          value?: parameters["rowFilter.settings.value"];
          is_enabled?: parameters["rowFilter.settings.is_enabled"];
          environment_id?: parameters["rowFilter.settings.environment_id"];
          created_at?: parameters["rowFilter.settings.created_at"];
          updated_at?: parameters["rowFilter.settings.updated_at"];
        };
        body: {
          /** settings */
          settings?: definitions["settings"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Teams can have multiple users */
  teams: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    logo?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
  };
  /** @description The different environments that teams can have */
  environments: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    url?: string;
    /**
     * Format: boolean
     * @default false
     */
    is_enabled: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    team_id?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: character varying */
    api_key?: string;
  };
  /** @description Users can belong to multiple teams */
  users_teams: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: uuid */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `teams.id`.<fk table='teams' column='id'/>
     */
    team_id: string;
  };
  /** @description The core of the app - the settings for the different environments */
  settings: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: text */
    value: string;
    /**
     * Format: boolean
     * @default false
     */
    is_enabled: boolean;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `environments.id`.<fk table='environments' column='id'/>
     */
    environment_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    full_name?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description teams */
  "body.teams": definitions["teams"];
  /** Format: uuid */
  "rowFilter.teams.id": string;
  /** Format: text */
  "rowFilter.teams.name": string;
  /** Format: text */
  "rowFilter.teams.logo": string;
  /** Format: timestamp with time zone */
  "rowFilter.teams.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.teams.updated_at": string;
  /** @description environments */
  "body.environments": definitions["environments"];
  /** Format: uuid */
  "rowFilter.environments.id": string;
  /** Format: text */
  "rowFilter.environments.name": string;
  /** Format: text */
  "rowFilter.environments.url": string;
  /** Format: boolean */
  "rowFilter.environments.is_enabled": string;
  /** Format: uuid */
  "rowFilter.environments.team_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.environments.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.environments.updated_at": string;
  /** Format: character varying */
  "rowFilter.environments.api_key": string;
  /** @description users_teams */
  "body.users_teams": definitions["users_teams"];
  /** Format: uuid */
  "rowFilter.users_teams.id": string;
  /** Format: uuid */
  "rowFilter.users_teams.user_id": string;
  /** Format: uuid */
  "rowFilter.users_teams.team_id": string;
  /** @description settings */
  "body.settings": definitions["settings"];
  /** Format: uuid */
  "rowFilter.settings.id": string;
  /** Format: character varying */
  "rowFilter.settings.name": string;
  /** Format: text */
  "rowFilter.settings.value": string;
  /** Format: boolean */
  "rowFilter.settings.is_enabled": string;
  /** Format: uuid */
  "rowFilter.settings.environment_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.settings.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.settings.updated_at": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.full_name": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
}

export interface operations {}

export interface external {}
